{"version":3,"sources":["api/api.js","components/CloseIcon.jsx","components/Progress.jsx","components/ConfirmDownloadMp3.jsx"],"names":["BASEURL","downloaderUrl","getVideoData","videoUrl","a","fetch","response","status","Error","json","downloadVideo","itag","name","metadata","progressCallback","progress","console","log","doneCallBack","axios","url","method","responseType","onDownloadProgress","progressEvent","loaded","then","container","format","saveAs","Blob","data","Date","now","catch","error","downloadMp3","mp3Data","writer","ID3Writer","title","artist","cover","setFrame","addTag","blob","getBlob","downloadMp3Fast","getFileSize","searchVideo","query","page","ok","statusText","CloseIcon","onClick","className","id","xmlns","width","height","viewBox","d","Progress","size","toFixed","value","max","ConfirmDownloadMp3","match","video","history","useState","downloadState","setDownload","setName","setMeta","setError","setProgress","setArtist","song","setSong","allowFast","reset","useEffect","params","e","close","push","onSubmit","event","preventDefault","thumbnail","state","onChange","target","type","parts","split","length","trim","placeholder","disabled"],"mappings":"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","file":"static/js/7.1c2ff13c.chunk.js","sourcesContent":["import ID3Writer from 'browser-id3-writer'\r\nimport {\r\n  saveAs\r\n} from 'file-saver'\r\nimport axios from 'axios'\r\n//const BASEURL = \"http://localhost:5000/api\" /*  || \"http://82.165.121.77:5000\" */\r\nconst BASEURL=\"/api\"\r\nconst downloaderUrl = BASEURL + \"/ytdl\"\r\nconst searchUrl = BASEURL + \"/search\"\r\nconst downloadProxyUrl = BASEURL + \"/dlproxy\"\r\n\r\nexport async function getVideoData(videoUrl) {\r\n  const response = await fetch(`${downloaderUrl}/simpleinfo?videolink=${videoUrl}`);\r\n  if (response.status >= 400) throw new Error(response)\r\n  return await response.json();\r\n\r\n}\r\n\r\n\r\n\r\nexport function downloadVideo(videoUrl, itag, name, metadata, progressCallback = (progress) => console.log(progress), doneCallBack = (progress) => console.log(progress)) {\r\n  axios({\r\n    url: `${downloaderUrl}/download?videolink=${videoUrl}${itag?`&format=${itag}`:\"\"}`,\r\n    method: \"GET\",\r\n    responseType: \"arraybuffer\",\r\n    onDownloadProgress: metadata ? (progressEvent) => {\r\n      console.log(progressEvent.loaded)\r\n      progressCallback(progressEvent.loaded)\r\n    } : null\r\n  }).then((response) => {\r\n    const container = metadata ? metadata.format.container : \"mp4\"\r\n    saveAs(new Blob([response.data]), name ? `${name}.${container}` : `video${Date.now()}.mp4`);\r\n    doneCallBack(\"finished\");\r\n  }).catch(error => {\r\n    console.log(error)\r\n    doneCallBack(\"failed! :(\");\r\n\r\n  })\r\n}\r\n\r\nexport function directDownloadVideo(videoUrl, itag){\r\n  window.open(`${downloaderUrl}/downloadmp3?videolink=${videoUrl}${itag?`&format=${itag}`:\"\"}`, '_blank');\r\n}\r\n\r\n\r\nexport function downloadMp3(videoUrl, itag, name, metadata, mp3Data, progressCallback = (progress) => console.log(progress), doneCallBack = (progress) => console.log(progress)) {\r\n  axios({\r\n    url: `${downloaderUrl}/downloadmp3?videolink=${videoUrl}${itag?`&format=${itag}`:\"\"}`,\r\n    method: \"GET\",\r\n    responseType: \"arraybuffer\",\r\n    onDownloadProgress: metadata ? (progressEvent) => {\r\n      progressCallback(progressEvent.loaded)\r\n    } : null\r\n  }).then((response) => {\r\n\r\n\r\n    const writer = new ID3Writer(response.data);\r\n    if (mp3Data) {\r\n      const {\r\n        title,\r\n        artist,\r\n        cover\r\n      } = mp3Data;\r\n      if (title) writer.setFrame('TIT2', title)\r\n      if (artist) writer.setFrame('TPE1', [artist])\r\n      /* if (cover) {\r\n        console.log(cover)\r\n        getCorsImage(cover, (buffer)=>{\r\n          writer.setFrame('APIC', {\r\n            type: 3,\r\n            data: buffer,\r\n            description: 'cover'\r\n        })\r\n        })\r\n\r\n      } */\r\n    }\r\n    writer.addTag();\r\n\r\n    const blob = writer.getBlob();\r\n\r\n    saveAs(blob, name ? `${name}.mp3` : `music${Date.now()}.mp3`);\r\n    doneCallBack(\"finished\");\r\n  }).catch(error => {\r\n    console.log(error)\r\n    doneCallBack(\"failed! :(\");\r\n\r\n  })\r\n\r\n\r\n}\r\n\r\nexport function downloadMp3Fast(videoUrl, itag, name, metadata, mp3Data, progressCallback = (progress) => console.log(progress), doneCallBack = (progress) => console.log(progress)) {\r\n  axios({\r\n    url: `${downloaderUrl}/downloadmp3?videolink=${videoUrl}${itag?`&format=${itag}`:\"\"}`,\r\n    method: \"GET\",\r\n    responseType: \"arraybuffer\",\r\n    onDownloadProgress: metadata ? (progressEvent) => {\r\n      progressCallback(progressEvent.loaded)\r\n    } : null\r\n  }).then((response) => {\r\n\r\n\r\n    const writer = new ID3Writer(response.data);\r\n    if (mp3Data) {\r\n      const {\r\n        title,\r\n        artist,\r\n      } = mp3Data;\r\n      if (title) writer.setFrame('TIT2', title)\r\n      if (artist) writer.setFrame('TPE1', [artist])\r\n      \r\n    }\r\n    writer.addTag();\r\n\r\n    const blob = writer.getBlob();\r\n\r\n    saveAs(blob, name ? `${name}.mp3` : `music${Date.now()}.mp3`);\r\n    doneCallBack(\"finished\");\r\n  }).catch(error => {\r\n    console.log(error)\r\n    doneCallBack(\"failed! :(\");\r\n\r\n  })\r\n\r\n\r\n}\r\n\r\nexport function directDownloadMp3(videoUrl, itag){\r\n  window.open(`${downloaderUrl}/downloadmp3?videolink=${videoUrl}${itag?`&format=${itag}`:\"\"}`, '_blank');\r\n}\r\n\r\n\r\n\r\nfunction getCorsImage(url, cb) {\r\n  const link = `${downloadProxyUrl}?link=${url}`\r\n  fetch(link).then(response => {\r\n    if (!response.ok) {\r\n      throw new Error(response.statusText)\r\n    }\r\n\r\n    return response.arrayBuffer();\r\n  }).then(buffer => {\r\n    cb(buffer)\r\n  }).catch(e => console.log(e))\r\n}\r\n\r\n\r\nexport function getFileSize(videoUrl, itag) {\r\n  return axios({\r\n    url: `${downloaderUrl}/getsize?videolink=${videoUrl}${itag?`&format=${itag}`:\"\"}`,\r\n    method: \"GET\",\r\n  })\r\n}\r\n\r\nexport function searchVideo(query, page) {\r\n  return fetch(`${BASEURL}/search?q=${query}${page? \"&page=\"+page: \"\"}`)\r\n    .then(response => {\r\n      //console.log(response)\r\n      if (!response.ok) throw Error(response.statusText)\r\n      return response.json();\r\n    })\r\n}","import React from 'react'\r\n\r\nconst CloseIcon = ({onClick, className}) => {\r\n    return (\r\n        <div  onClick={onClick} id=\"closeIcon\"  className={\"centerAll pointer\"}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\"><path d=\"M24 20.188l-8.315-8.209 8.2-8.282-3.697-3.697-8.212 8.318-8.31-8.203-3.666 3.666 8.321 8.24-8.206 8.313 3.666 3.666 8.237-8.318 8.285 8.203z\"/></svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CloseIcon\r\n","import React from 'react'\r\n\r\nconst Progress = ({size, progress}) => {\r\n    return (\r\n        <div className=\"progressContainer centerText fancyShadow\">\r\n            <p>SIZE: {(size/1000000).toFixed(2)} MB</p>\r\n            <progress value={progress} max={size}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Progress\r\n","import React, { useState, useEffect } from 'react'\r\nimport { downloadMp3, downloadMp3Fast, getFileSize } from '../api/api';\r\nimport CloseIcon from './CloseIcon';\r\nimport Progress from './Progress';\r\n\r\nconst ConfirmDownloadMp3 = ({ match, video, history }) => {\r\n    const [downloadState, setDownload] = useState(\"download\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    const [metadata, setMeta] = useState(0);\r\n    const [error, setError] = useState(\"\");\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    const [artist, setArtist] = useState(\"\");\r\n    const [song, setSong] = useState(\"\");\r\n\r\n    const [allowFast, setFast]=useState(false);\r\n\r\n    const download = (event) => {\r\n        event.preventDefault();\r\n        if(downloadState===\"download\"){\r\n            /* if file is more than 500mb download video directly and dont store it in memory before */\r\n            if(false){\r\n                /* download video directly */\r\n                return close();\r\n            }\r\n            \r\n            if(!allowFast){\r\n                setDownload(\"loading\")\r\n                const cover=video && video.thumbnail\r\n                return downloadMp3(\r\n                    match.params.query, \r\n                    match.params.itag, \r\n                    name,\r\n                    metadata, \r\n                    {title: song, artist: artist, cover: cover}, \r\n                    (loaded)=>setProgress(loaded), \r\n                    (state)=>setDownload(state)\r\n                );\r\n            } \r\n            return downloadMp3Fast(\r\n                match.params.query, \r\n                match.params.itag, \r\n                name,\r\n                metadata, \r\n                {title: song, artist: artist}, \r\n                (loaded)=>setProgress(loaded), \r\n                (state)=>setDownload(state)\r\n            );\r\n\r\n        }\r\n        if(downloadState===\"failed :(\"){\r\n            return reset();\r\n        }\r\n        if(downloadState===\"finished\"){\r\n            return close();\r\n        }\r\n    }\r\n    const reset=()=>{\r\n        setMeta(null);\r\n        setProgress(0);\r\n        setError(\"\");\r\n        setDownload(\"download\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        reset();\r\n        if (video) setName(video.title)\r\n        getFileSize(match.params.query, match.params.itag).then(response => {\r\n            /* disabled button while waiting */\r\n            setMeta(response.data)\r\n        }).catch(e => {\r\n            /* enable when failed or succes */\r\n            console.log(e);\r\n            setError(\"failed to get videoinfo... you can try download anyway\")\r\n        });\r\n    }, [video, match.params.query, match.params.itag])\r\n\r\n\r\n    const generateMp3Tags=(event)=>{\r\n        event.preventDefault();\r\n        if(video.title){\r\n            const parts=video.title.split(\"-\");\r\n            if(parts.length===2){\r\n                setArtist(parts[0].trim());\r\n                setSong(parts[1].trim());\r\n            }\r\n        }\r\n    }\r\n\r\n    const close=()=>{\r\n        history.push(`/video/${match.params.query}`)\r\n    }\r\n\r\n\r\n    if (!video) return <div id=\"confirmModal\" className=\"centerAll\"><h1>LOADING</h1></div>\r\n\r\n    return (\r\n        <div id=\"confirmModal\" className=\"centerAll\">\r\n            <form id=\"customNameForm\" onSubmit={download}>\r\n                <CloseIcon onClick={close} />\r\n                <h1 className=\"centerText\">CONFIRM DOWNLOAD</h1>\r\n                {metadata && <Progress size={metadata.size} progress={progress} />}\r\n                <input value={name} onChange={(e) => setName(e.target.value)} type=\"text\" />\r\n                \r\n                <button onClick={generateMp3Tags} id=\"autoMp3Button\" className=\"marginAuto\">AUTO GENERATE</button>\r\n                \r\n                <input value={artist} placeholder=\"add an artist if you want\" onChange={(e) => setArtist(e.target.value)} type=\"text\" />\r\n                <input value={song} placeholder=\"add song name\" onChange={(e) => setSong(e.target.value)} type=\"text\" />\r\n                <input className=\"submit hoverShadow\" value={downloadState} type=\"submit\" disabled={false}/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfirmDownloadMp3"],"sourceRoot":""}
{"version":3,"sources":["img/coon.png","components/util.js","components/Icon.jsx","components/Navigation.jsx","components/PageLoading.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","getYoutubeID","url","urlComponents","match","Icon","id","className","to","src","icon","alt","PageLoading","useState","ready","setReady","useEffect","timeOut","setTimeout","clearTimeout","ConfirmDownload","lazy","ConfirmDownloadMp3","YoutubeSearch","Downloader","App","video","setVideo","window","innerHeight","appHeight","setHeight","resizeListener","addEventListener","removeEventListener","style","minHeight","fallback","Navigation","path","render","history","location","toString","component","props","href","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f1de4a6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coon.c7bb7959.png\";","export function redirectIfValid(history){\r\n    if(history && history.location && history.location.search){\r\n        const parsedUrl=new URL(window.location.toString());\r\n        const url=parsedUrl.searchParams.get(\"url\");\r\n        if(url){\r\n            const ytID=getYoutubeID(url);\r\n            if(ytID) return history.push(`/video/${ytID}`)\r\n            /* if not a valid youtube id go to start page */\r\n            history.push('/');\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport function getYoutubeID(url){\r\n    /* check if its a valid youtube url and then take the first 11 chars of id and ditch the others */\r\n    const idRegex = /^.*(youtu.be\\/|youtube(-nocookie)?.com\\/(v\\/|.*u\\/\\w\\/|embed\\/|.*v=))([\\w-]{11}).*/;\r\n    const urlComponents=url.match(idRegex)\r\n    if (urlComponents && urlComponents[4]) {\r\n        return urlComponents[4]\r\n    }\r\n    return false\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport icon from '../img/coon.png'\r\n\r\nexport const Icon = () => {\r\n    return (\r\n        <Link id=\"mainIcon\" className=\"centerAll\" to=\"/\">\r\n            YT\r\n            <img src={icon} alt=\"coon icon\" />\r\n            COON\r\n        </Link>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport { Icon } from './Icon'\r\n\r\nexport default () => {\r\n    return (\r\n        <nav id=\"nav\">\r\n            <div className=\"inner\">\r\n                <Icon/>\r\n                <section>\r\n                    <Link to=\"/search\" className=\"pointer undecoratedLink\">SEARCH</Link>\r\n                </section>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst PageLoading = () => {\r\n    const [ready, setReady] = useState(false)\r\n    useEffect(() => {\r\n        const timeOut=setTimeout(() => setReady(true), 800);\r\n        return () => {\r\n            clearTimeout(timeOut);\r\n        };\r\n    }, [])\r\n    \r\n    return ready && <div id=\"loadingScreen\" className=\"centerAll\">LOADING...</div>\r\n        \r\n}\r\n\r\nexport default PageLoading","import React, { useState, useEffect, Suspense, lazy } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport Navigation from './components/Navigation';\r\nimport { redirectIfValid } from './components/util';\r\nimport PageLoading from './components/PageLoading';\r\n\r\nconst ConfirmDownload=lazy(()=>import('./components/ConfirmDownload'));\r\nconst ConfirmDownloadMp3=lazy(()=>import('./components/ConfirmDownloadMp3'));\r\nconst YoutubeSearch=lazy(()=>import('./components/YoutubeSearch'));\r\nconst Downloader=lazy(()=>import('./components/Downloader'));\r\n\r\n\r\n\r\nfunction App() {\r\n  const [video, setVideo] = useState(null);\r\n  const [appHeight, setHeight] = useState(window.innerHeight);\r\n\r\n  useEffect(() => {\r\n    const resizeListener = window.addEventListener('resize', () => {\r\n      setHeight(window.innerHeight);\r\n    })\r\n    return () => {\r\n      window.removeEventListener(resizeListener);\r\n    };\r\n  }, [])\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      {/* handle mobile browser bullshit */}\r\n      <div style={{ minHeight: `${appHeight}px` }} className=\"fullSizeContainer borderBox\">\r\n        <Suspense fallback={PageLoading}>\r\n          <Navigation />\r\n          <main>\r\n            <Switch>\r\n              {/* route to share youtube urls from other android apps (youtube for example <3) only works on adroid for now :(  */}\r\n              {/* <Route path=\"/share\" render={({ history }) => redirectIfValid(history)} /> */}\r\n              \r\n              {/* debug share function */}\r\n              <Route path=\"/share\" render={({ history }) => <div className=\"centerAll\" id=\"debugFullHeight\">{history.location.toString()}</div>} />\r\n\r\n              <Route path=\"/search\" component={YoutubeSearch} />\r\n              <Route path=\"/\" render={({ history }) => <Downloader history={history} video={video} setVideo={setVideo} />} />\r\n            </Switch>\r\n            <Route\r\n              path=\"/video/:query/confirm/:itag\"\r\n              render={\r\n                (props) => <ConfirmDownload {...props} video={video} />}\r\n            />\r\n            <Route\r\n              path=\"/video/:query/confirm_mp3/:itag\"\r\n              render={\r\n                (props) => <ConfirmDownloadMp3 {...props} video={video} />}\r\n            />\r\n          </main>\r\n          <footer className=\"centerText\">\r\n            <p>\r\n              found a bug or have a question?\r\n          </p>\r\n            <a href=\"mailto:kantemir.imam@gmail.com\">{\"<Contact!>\"}</a>\r\n          </footer>\r\n        </Suspense>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n/* serviceWorker.unregister(); */\n\nserviceWorker.register();"],"sourceRoot":""}